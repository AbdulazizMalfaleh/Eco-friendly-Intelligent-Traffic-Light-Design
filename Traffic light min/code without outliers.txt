#include <SoftwareSerial.h>
SoftwareSerial mySerial(10, 11); // RX, TX

void setup() {
  Serial.begin(9600);
  mySerial.begin(115200);
}

void loop() {
  int distanceValues[5];

  // Read five distance values
  for (int i = 0; i < 5; ++i) {
    if (mySerial.available()) {
      distanceValues[i] = readDistance();
      Serial.print("Distance ");
      Serial.print(i + 1);
      Serial.print(": ");
      Serial.print(distanceValues[i]);
      Serial.println(" cm");
      delay(1000);
    }
  }

  // Calculate mean without outliers
  double meanResult = calculateMeanWithoutOutliers(
      distanceValues[0], distanceValues[1], distanceValues[2], distanceValues[3], distanceValues[4]);

  Serial.print("Mean distance without outliers: ");
  Serial.print(meanResult);
  Serial.println(" cm");

  // Optionally, add a delay before repeating the process
  delay(5000);
}

int readDistance() {
  int distance = 0;
  while (mySerial.available() >= 9) {
    if (mySerial.read() == 0x59) {
      if (mySerial.read() == 0x59) {
        int lowByte = mySerial.read();
        int highByte = mySerial.read();
        distance = lowByte + highByte * 256;
        mySerial.read(); // discard checksum
        mySerial.read(); // discard checksum
      }
    }
  }
  return distance;
}

double calculateMeanWithoutOutliers(double value1, double value2, double value3, double value4, double value5) {
  // Collect the values in a vector
  std::vector<double> values = {value1, value2, value3, value4, value5};

  // Sort the values
  std::sort(values.begin(), values.end());

  // Remove the smallest and largest values (outliers)
  values.erase(values.begin());
  values.pop_back();

  // Calculate the mean of the remaining values
  double meanValue = std::accumulate(values.begin(), values.end(), 0.0) / values.size();

  return meanValue;
}
