#include esp_now.h
#include WiFi.h

#define red 0
#define yellow 1
#define green 2

int GREEN = 5;
int YELLOW = 4;
int RED = 15;
int DELAY_GREEN = 3000;
int DELAY_YELLOW = 1000;
int DELAY_RED = 5000;

int count = 0;


#define CHANNEL 1 same channel between M and S 
esp_now_peer_info_t slave; MAC addr of slave

struct Trafficlight{
  uint8_t Tr; seconds
  uint8_t Ty; seconds
  uint8_t Tg; seconds
  uint8_t color;
  };



Trafficlight TLS;

 void setup(){
  pinMode(GREEN, OUTPUT);
  pinMode(YELLOW, OUTPUT);
  pinMode(RED, OUTPUT);

   Serial.begin(115200); start serial monitor baud rate 115200
   WiFi.mode(WIFI_STA); Tx mode is STA
   esp_now_init(); initiate espNOW
   esp_now_register_send_cb(OnDataSent);  call back function
   ScanForSlave();
   esp_now_add_peer(&slave); pointer of slave
  }

 void loop(){
    TLS.Tr=5; 
    TLS.Ty=1;
    TLS.Tg=3;

  if(count == 0){
    for(int s=0; s3; s++){
      delay(1000);
      count++;
    }
  }
     open green 
  green_light();
  TLS.color = green;
 for(int j=0; j3; j++){ 
    delay(1000); 
    TLS.Tg = TLS.Tg - 1;
    esp_now_send(slave.peer_addr, (uint8_t)&TLS, sizeof(TLS));
 }
  close green


  open yellow
 yellow_light();
 TLS.color=yellow;
 for(int k=0; k1; k++){ 
   delay(1000);
   TLS.Ty = TLS.Ty - 1;
   esp_now_send(slave.peer_addr, (uint8_t)&TLS, sizeof(TLS));
 }

    open red
   red_light();
   TLS.color = red;
   for(int i=0; i5; i++){
      delay(1000);
      TLS.Tr = TLS.Tr - 1;
     esp_err_t send =  esp_now_send(slave.peer_addr, (uint8_t)&TLS, sizeof(TLS)); 
      esp_now_send(slave.peer_addr, (uint8_t)&TLS, sizeof(TLS));
   }
   Close red 

 }

 void OnDataSent(const uint8_t mac_addr, esp_now_send_status_t status){
   Serial.println(I sent data - );
   Serial.print(red time );
   Serial.println(TLS.Tr);
   Serial.print(yellow time );
   Serial.println(TLS.Ty);
   Serial.print(green time );
   Serial.println(TLS.Tg);
   if(TLS.color == red)
   Serial.println(-- RED --);
   else if(TLS.color == green)
   Serial.println(-- GREEN --);
   else
   Serial.println(-- YELLOW --);

 

Serial.println(---------------------------------------);
 }


void ScanForSlave(){  
   int8_t scanResults = WiFi.scanNetworks();

   for( int i=0; iscanResults; ++i){
     String SSID = WiFi.SSID(i);
     String BSSIDstr = WiFi.BSSIDstr(i);

     if(SSID.indexOf(RX_1) == 0){
           int mac[6];
           if(6==sscanf(BSSIDstr.c_str(), %x%x%x%x%x%x, &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5])){
             for(int ii=0; ii6; ++ii){
               slave.peer_addr[ii] = (uint8_t) mac[ii];
             }
           }
           slave.channel = CHANNEL;
           slave.encrypt =0;
           break;
     }
   }
 }

void green_light()
{
  digitalWrite(GREEN, HIGH);
  digitalWrite(YELLOW, LOW);
  digitalWrite(RED, LOW);
}

void yellow_light()
{
  digitalWrite(GREEN, LOW);
  digitalWrite(YELLOW, HIGH);
  digitalWrite(RED, LOW);
}

void red_light()
{
  digitalWrite(GREEN, LOW);
  digitalWrite(YELLOW, LOW);
  digitalWrite(RED, HIGH);
}